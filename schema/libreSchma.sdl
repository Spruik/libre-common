
type User  {
    id:ID!
    username: String! @id
    name: String
    isType: UserType! @search
    hasRole: [UserRole] @hasInverse(field:user)
    isActive:Boolean
}

type UserRole {
    id:ID!
    role:Role! @hasInverse(field:hasMembers)
    user:User! @hasInverse(field:hasRole)
    responsibilities:[Equipment]!
    isActive:Boolean
}

enum UserType{
    USER
    ADMIN
}

type Role {
  name: String! @id
  hasMembers:[UserRole] @hasInverse(field:role)
  hasGrantedRights:[AccessRight] @hasInverse(field:forRole)
  isActive:Boolean
}

type AccessRight  {
  id: ID!
  name: AccessRights @search
  forRole: Role @hasInverse(field:hasGrantedRights)
  isActive:Boolean
}

enum AccessRights {
    isAdmin
    canViewEquipment
    canAddEquipment
    canEditEquipment
    canDeleteEquipment
    canViewEquipmentType
    canAddEquipmentType
    canEditEquipmentType
    canDeleteEquipmentType
    canViewProperty
    canAddProperty
    canEditProperty
    canDeleteProperty
}

type ACL {
    id: ID!
    isActive:Boolean @search
    level: AccessLevel
    grants: Role
}

enum AccessLevel {
  VIEWER
  MODERATOR
  OWNER
}


type Menu {
    id: ID!
    label: String! @search(by: [hash])
    access: [Role!]!
    parent: Menu @hasInverse(field: children)
    children: [Menu!] @hasInverse(field: parent)
    menuPage: String
    icon: String
    isSection: Boolean!
    isPage: Boolean!
    orderNumber: Int
}

type OperationsRequest @withSubscription {
    id:ID!
    isActive:Boolean @search
    code:String! @id
    operationsType: WorkType!
    plannedStartDateTime:DateTime
    plannedEndDateTime:DateTime
    priority:String
    operationsDefinition:OperationsDefinition!
    requestState:RequestState!
    quantity:Float!
    quantityUoM:UnitOfMeasure!
    jobOrders:[JobOrder] @hasInverse(field:operationsRequest)
}
type RequestState  {
    id:ID!
    isActive:Boolean @search
    name:String! @id
    description:String
}

enum WorkType {
    Production
    Maintenance
    Quality
    Inventory
    Mixed
}
type OperationsDefinition @withSubscription {
    id:ID!
    isActive:Boolean @search
    name:String! @id
    material:MaterialDefinition @hasInverse(field:operationsDefinitions)
    version: String
    description: String
    operationsType: WorkType!
    hierarchyScope: String
    billOfMaterial: BillOfMaterial @hasInverse(field:operationsDefinition)
    segments: [OperationsSegment] @hasInverse(field:operationsDefinition)
}
type BillOfMaterial @withSubscription {
    id:ID!
    isActive:Boolean @search
    name: String! @id
    version:String!
    description:String
    materialSpecifications:[MaterialSpecification] @hasInverse(field:billOfMaterial)
    operationsDefinition:OperationsDefinition @hasInverse(field:billOfMaterial)
}
type OperationsSegment @withSubscription {
    id:ID!
    isActive:Boolean @search
    name:String!
    version:String
    type:SegmentType
    uiComponent:String
    description:String  @search(by: [hash])
    parent:OperationsSegment @hasInverse(field:children)
    children:[OperationsSegment] @hasInverse(field:parent)
    workType:WorkType @search
    workDefinitionType:String  @search(by: [hash])
    duration:Float
    glAccountWIP:String
    glAccountWIPInvoice:String
    glAccountFixedOverhead:String
    glAccountVariableOverhead:String
    glAccountDirectLabour:String
    invoiceSettings:[SegmentInvoiceSetting]
    costAmountFixedOverhead:Float
    costDriverFixedOverhead:CostDriver
    costAmountVariableOverhead:Float
    costAmountDirectLabourRate:Float
    durationUoM:UnitOfMeasure
    materialSpecifications:[MaterialSpecification] @hasInverse(field:operationsSegment)
    equipmentSpecifications:[EquipmentSpecification] @hasInverse(field:operationsSegment)
    personnelSpecifications:[PersonnelSpecification] @hasInverse(field:operationsSegment)
    hierarchyScope: String
    inflows:[SegmentDependency] @hasInverse(field:to)
    outflows:[SegmentDependency] @hasInverse(field:from)
    operationsDefinition:OperationsDefinition @hasInverse(field:segments)
    jobOrders:[JobOrder] @hasInverse(field:operationsSegment)
    positionX:Int
    positionY:Int
}
enum SegmentType {
    USER_TASK
    SYSTEM_TASK
    EMBED_SUBPROCESS
}

type SegmentInvoiceSetting {
    id:ID!
    partner:Partner
    costPerHour:Float
    costPerUnit:Float
}
type SegmentDependency @withSubscription {
    id:ID!
    isActive:Boolean @search
    description:String
    from:OperationsSegment! @hasInverse(field:outflows)
    to:OperationsSegment! @hasInverse(field:inflows)
    dependencyType:DependencyType
    dependencyFactor:Float
    factorUoM:UnitOfMeasure
    condition:String
}
enum DependencyType {
    StartAfterStart
    StartAfterEnd
    CanRunParallel
    CannotRunParallel
}
type WorkMaster @withSubscription {
    id:ID!
    isActive:Boolean @search
    name:String! @id
    version:String
    description:String  @search(by: [hash])
    parent:WorkMaster @hasInverse(field:children)
    children:[WorkMaster] @hasInverse(field:parent)
    workType:WorkType @search
    workDefinitionType:String  @search(by: [hash])
    materialSpecifications:[MaterialSpecification] @hasInverse(field:workMaster)
    equipmentSpecifications:[EquipmentSpecification] @hasInverse(field:workMaster)
    personnelSpecifications:[PersonnelSpecification] @hasInverse(field:workMaster)
    duration:Float
    durationUoM:UnitOfMeasure
    jobOrders:[JobOrder] @hasInverse(field:workMaster)
    workDirectives:[WorkDirective] @hasInverse(field:workMaster)
}
type WorkDirective @withSubscription {
    id:ID!
    name:String! @id
    version:String
    description:String  @search(by: [hash])
    parent:WorkDirective @hasInverse(field:children)
    children:[WorkDirective] @hasInverse(field:parent)
    workType:WorkType @search
    workDefinitionType:String  @search(by: [hash])
    duration:Float
    durationUoM:UnitOfMeasure
    materialSpecifications:[MaterialSpecification] @hasInverse(field:workDirective)
    equipmentSpecifications:[EquipmentSpecification] @hasInverse(field:workDirective)
    personnelSpecifications:[PersonnelSpecification] @hasInverse(field:workDirective)
    isActive:Boolean @search
    jobOrders:[JobOrder] @hasInverse(field:workDirective)
    jobResponses:[JobResponse] @hasInverse(field:workDirective)
    workMaster:WorkMaster @hasInverse(field:workDirectives)
}
type JobOrder @withSubscription {
    id:ID!
    isActive:Boolean @search
    createdDateTime:DateTime @search
    name:String! @id @search(by: [hash, regexp])
    version:String
    description:String  @search(by: [hash])
    parent:JobOrder @hasInverse(field:children)
    children:[JobOrder] @hasInverse(field:parent)
    workType:WorkType @search
    workDefinitionType:String  @search(by: [hash])
    duration:Float
    durationUoM:UnitOfMeasure
    workMaster:WorkMaster @hasInverse(field:jobOrders)
    workDirective:WorkDirective @hasInverse(field:jobOrders)
    materialSpecifications:[MaterialSpecification] @hasInverse(field:jobOrder)
    equipmentSpecifications:[EquipmentSpecification] @hasInverse(field:jobOrder)
    personnelSpecifications:[PersonnelSpecification] @hasInverse(field:jobOrder)
    scheduledStartDateTime:DateTime @search
    scheduledEndDateTime:DateTime @search
    scheduledDuration:Float
    equipment:Equipment @hasInverse(field:jobOrders)
    quantity:Float
    quantityUoM:UnitOfMeasure
    priority:Int
    hierarchyScope:String
    dispatchStatus:String @search(by: [hash])
    operationsRequest:OperationsRequest @hasInverse(field:jobOrders)
    operationsSegment:OperationsSegment @hasInverse(field:jobOrders)
    jobResponses:[JobResponse] @hasInverse(field:jobOrder)
}
type JobResponse @withSubscription {
    id:ID!
    isActive:Boolean @search
    createdDateTime:DateTime
    modifiedDateTime:DateTime
    workDirective:WorkDirective @hasInverse(field:jobResponses)
    operator:User
    equipment:Equipment @hasInverse(field:jobResponses)
    startDateTime:DateTime @search
    endDateTime:DateTime @search
    productionDate:String @search(by: [hash])
    actualDuration:Float
    jobOrder:JobOrder @hasInverse(field:jobResponses)
    events:[EventLog] @hasInverse(field:jobResponse)
    quantities:[QuantityLog] @hasInverse(field:jobResponse)
}
type EventLog @withSubscription {
    id:ID!
    isActive:Boolean @search
    jobResponse:JobResponse! @hasInverse(field:events)
    equipment:Equipment @hasInverse(field:events)
    startDateTime:DateTime @search
    endDateTime:DateTime @search
    duration:Float
    reasonCode:String @search(by: [hash])
    reasonText:String @search(by: [hash])
    reasonCategoryCode:String @search(by: [hash])
    reasonValue:Float
    reasonValueUoM:UnitOfMeasure
    comments:String @search(by: [hash])
}
type QuantityLog @withSubscription {
    id:ID!
    isActive:Boolean @search
    jobResponse:JobResponse! @hasInverse(field:quantities)
    equipment:Equipment @hasInverse(field:quantities)
    type:MaterialUse! @search
    timestamp:DateTime @search
    quantity: Float!
    reasonCode:String @search(by: [hash])
    reasonText:String @search(by: [hash])
    comments:String @search(by: [hash])
}

type EquipmentSpecification @withSubscription  {
    id:ID!
    isActive:Boolean @search
     workMaster: WorkMaster @hasInverse(field:equipmentSpecifications)
     workDirective: WorkDirective @hasInverse(field:equipmentSpecifications)
     jobOrder: JobOrder @hasInverse(field:equipmentSpecifications)
     operationsSegment: OperationsSegment @hasInverse(field:equipmentSpecifications)
     equipment:Equipment @hasInverse(field:workSpecifications)
     equipmentClass:EquipmentClass
     description:String
     quantity:Float
     uom:UnitOfMeasure

}
type MaterialSpecification @withSubscription  {
    id:ID!
    isActive:Boolean @search
     workMaster: WorkMaster @hasInverse(field:materialSpecifications)
     workDirective: WorkDirective @hasInverse(field:materialSpecifications)
     jobOrder: JobOrder @hasInverse(field:materialSpecifications)
     operationsSegment: OperationsSegment @hasInverse(field:materialSpecifications)
     billOfMaterial: BillOfMaterial @hasInverse(field:materialSpecifications)
     material:MaterialDefinition @hasInverse(field:workSpecifications)
     materialClass:MaterialClass
     description:String
     materialUse:MaterialUse!
     isTracked:Boolean
     quantity:Float
     uom:UnitOfMeasure
}
type PersonnelSpecification @withSubscription  {
    id:ID!
    isActive:Boolean @search
     workMaster: WorkMaster @hasInverse(field:personnelSpecifications)
     workDirective: WorkDirective @hasInverse(field:personnelSpecifications)
     jobOrder: JobOrder @hasInverse(field:personnelSpecifications)
     operationsSegment: OperationsSegment @hasInverse(field:personnelSpecifications)
     person:Person
     personnelClass:PersonnelClass
     description:String
     personnelUse:String
     quantity:Float
     uom:UnitOfMeasure

}
enum MaterialUse {
    Initial
    Produced
    ByProduct
    CoProduct
    Consumable
    Consumed
    Transferred
    Scrap
    Rework
    Received
    Packed
    Shipped
}

type Equipment @withSubscription  {
    id:ID!
    isActive:Boolean @search
    name : String! @search(by: [hash])
    label : String @search(by: [hash])
    displayName : String @search(by: [hash])
    description : String @search(by: [hash])
    erpAssetID :String @search(by: [hash])
    parent: Equipment @hasInverse(field:children)
    children: [Equipment] @hasInverse(field:parent)
    equipmentClass: EquipmentClass
    equipmentLevel: EquipmentElementLevel @search
    materialEquipment:[MaterialEquipment] @hasInverse(field:equipment)
    properties: [Property] @hasInverse(field:equipment)
    carriers:[Carrier] @hasInverse(field:storageLocation)
    materialSubLots: [MaterialSubLot] @hasInverse(field:storageLocation)
    transactions:[InventoryTransaction] @hasInverse(field:storageLocation)
    inventoryHandlingRules:[InventoryHandlingRule] @hasInverse(field:warehouse)
    dataProvider:DataProvider
    dataProviderConnection:String
    addressTemplate:String
    timeZoneName:String
    workSpecifications:[EquipmentSpecification] @hasInverse(field:equipment)
    workCalendar: WorkCalendar @hasInverse(field:equipment)
    jobResponses:[JobResponse] @hasInverse(field:equipment)
    jobOrders:[JobOrder] @hasInverse(field:equipment)
    shipments:[Shipment] @hasInverse(field:warehouse)
    Orders:[Order] @hasInverse(field:warehouse)
    events:[EventLog] @hasInverse(field:equipment)
    quantities:[QuantityLog] @hasInverse(field:equipment)
    allowAdhocWorklog:Boolean
    reasons: [Reason] @hasInverse(field:equipment)
    reasonOverrides: [EquipmentReasonOverride] @hasInverse(field:equipment)
    propertyOverrides:[EquipmentPropertyOverride] @hasInverse(field:equipment)
    mpmEnableJobInterlock:Boolean
    mpmPermissiveOutputName:String
    mpmEnableAutoIdentMatching:Boolean
    mpmAutoIdentMatchSource:String
    mpmEnableSetupStartDetection:Boolean
    mpmEnableSetupCloseDetection:Boolean
    mpmEnableORCWarning:Boolean
    mpmORCWarnTrigger:mpmORCWarnTriggers
    mpmEnableORCRevokePermissive:Boolean
    mpmORCRevokePermissiveTrigger:mpmORCRevokeTriggers
    mpmEnableORCBlockNextOrder:Boolean
    mpmEnableCallMaintenanceEvent:Boolean
    mpmEnableMaintenanceHandover:Boolean
    mpmEnableManualShiftStart:Boolean
    mpmEnableManualShiftEnd:Boolean
    mpmEnableManualBreak:Boolean
    mpmEnableManualPlannedMaint:Boolean
}


enum mpmORCWarnTriggers {
    FIFTEEN_MINUTES
    THIRTY_MINUTES
    FORTYFIVE_MINUTES
    SIXTY_MINUTES
    ORDER_CLOSE
    BREAK_TIME_START
    BREAK_TIME_END
}
enum mpmORCRevokeTriggers {
    FIFTEEN_MINUTES
    THIRTY_MINUTES
    FORTYFIVE_MINUTES
    SIXTY_MINUTES
    ORDER_CLOSE
    BREAK_TIME_START
    BREAK_TIME_END
}



type EquipmentReasonOverride @withSubscription  {
    id:ID!
    isActive:Boolean @search
    equipment:Equipment @hasInverse(field:reasonOverrides)
    reason:Reason @hasInverse(field:equipmentOverrides)
    ignore:Boolean
    standardValue:Float
}

type EquipmentClass @withSubscription  {
    id:ID!
    isActive:Boolean @search
    name : String! @search(by: [hash])
    label : String @search(by: [hash])
    displayName : String @search(by: [hash])
    description : String @search(by: [hash])
    parent: EquipmentClass @hasInverse(field:children)
    children: [EquipmentClass] @hasInverse(field:parent)
    properties: [Property]
    eventDefinitions: [EventDefinition]
    reasons: [Reason] @hasInverse(field:equipmentClass)
    equipmentLevel: EquipmentElementLevel
    addressTemplate:String
    image: String
}

enum DataType {
    BOOL
    INT
    INT32
    FLOAT64
    FLOAT
    STRING
}
enum DataProvider {
    MQTT
}
enum EquipmentElementLevel {
    Enterprise
    Site
    Area
    ProcessCell
    Unit
    ProductionLine
    WorkCell
    ProductionUnit
    Warehouse
    StorageZone
    StorageUnit
    WorkCenter
    WorkUnit
    EquipmentModule
    ControlModule
    Other
}
type Property @withSubscription {
    id:ID!
    isActive:Boolean @search
    type: PropertyType
    name: String! @search(by: [hash])
    description: String! @search(by: [hash])
    dataType: DataType!
    definedBy: Property
    address:String
    expression:String
    value:String
    unitOfMeasure:UnitOfMeasure
    storeHistory:Boolean
    isTestedBy:[TestSpecification]
    equipment:Equipment @hasInverse(field:properties)
    equipmentClass:EquipmentClass @hasInverse(field:properties)
    propertyOverrides:[EquipmentPropertyOverride] @hasInverse(field:property)

}
enum PropertyType {
    BOUND
    CALCULATED
    REFERENCED
}
type EquipmentPropertyOverride @withSubscription {
    id:ID!
    isActive:Boolean @search
    equipment: Equipment! @hasInverse(field:propertyOverrides)
    property: Property! @hasInverse(field:propertyOverrides)
    address:String
    expression:String
    value:String
    storeHistory:Boolean
    ignore:Boolean
}
type EventDefinition @withSubscription {
    id:ID!
    isActive:Boolean @search
    name: String! @search(by: [hash])
    messageClass: MessageClass!
    triggerProperties:[Property]
    triggerExpression:String!
    payloadProperties:[Property]
    payloadFields:[PayloadFieldDefinition]
}
type PayloadFieldDefinition @withSubscription {
    id:ID!
    isActive:Boolean @search
    name: String!
    expression: String!
    fieldType: PayloadFieldType!
}

enum PayloadFieldType{
    Tag
    Field
    Other
}

type Reason @withSubscription {
    id:ID!
    isActive:Boolean @search
    class: ReasonClass! @search(by: [hash])
    category: ReasonCategory @hasInverse(field:reason)
    label: String! @search(by: [hash])
    text: String! @search(by: [hash])
    erpCode: String! @search(by: [hash])
    standardValue: Float
    valueUoM:UnitOfMeasure
    parent: Reason @hasInverse(field:children)
    children: [Reason] @hasInverse(field:parent)
    equipmentClass:EquipmentClass @hasInverse(field:reasons)
    equipment:Equipment @hasInverse(field:reasons)
    equipmentOverrides:[EquipmentReasonOverride] @hasInverse(field:reason)
}

enum ReasonClass {
    Time
    Scrap
}

enum MessageClass {
    EventLog
    QuantityLog
    AttendanceLog
    JobRequest
    JobResponse
}

enum MachineState {
    Stopped
    Resetting
    Idle
    Starting
    Execute
    Unholding
    Held
    Holding
    Completing
    Complete
    Unsuspending
    Suspended
    Suspending
    Aborting
    Aborted
    Clearing
    Stopping
}
type ReasonCategory  {
    id:ID!
    isActive:Boolean @search
    reason: [Reason] @hasInverse(field:category)
    code:String! @id
    timeCategory:TimeCategory!
}
enum TimeCategory {
	APT
	AUST
	ADET
	ADOT
	PSDT
	PDOT
	TTR
}



type MaterialClass @withSubscription  {
    id:ID!
    isActive:Boolean @search
    code:String! @id
    description:String
    properties:[Property]
    scheduleSortOrder:Int
    parent: MaterialClass @hasInverse(field:children)
    children: [MaterialClass] @hasInverse(field:parent)
    inventoryHandlingPolicy: InventoryHandlingPolicy @hasInverse(field:materialClass)
}
type MaterialDefinition @withSubscription  {
    id:ID!
    isActive:Boolean @search
    code:String! @id
    materialClass:MaterialClass
    description:String
    properties:[Property]
    scheduleSortOrder:Int
    baseUnitOfMeasure:UnitOfMeasure!
    uomConversions:[UnitOfMeasureConversion] @hasInverse(field:material)
    workSpecifications:[MaterialSpecification] @hasInverse(field:material)
    operationsDefinitions:[OperationsDefinition] @hasInverse(field:material)
    sublots:[MaterialSubLot] @hasInverse(field:material)
    units:[MaterialUnit] @hasInverse(field:material)
    events:[InventoryTransaction] @hasInverse(field:material)
    value:Float
    valueCurrency:String
    weightKG:Float
    supplier:String
    serialMask:String
    inventoryHandlingPolicy:InventoryHandlingPolicy
    alternates:[MaterialAlternate] @hasInverse(field:material)
    materialEquipment:[MaterialEquipment] @hasInverse(field:material)
    shipmentItems:[ShipmentItem] @hasInverse(field:material)
    OrderLines:[OrderLine] @hasInverse(field:material)
    transferrableMaterials: [MaterialDefinition]
    customerMaterialCode: String @search(by: [hash])
}
type MaterialAlternate  {
    id:ID!
    isActive:Boolean @search
    material:MaterialDefinition! @hasInverse(field:alternates)
    alternateMaterial:MaterialDefinition!
    effectiveDateTime:DateTime!
    priorityOrder:Int!
}
type Carrier  {
    id:ID!
    code:String! @id
    isActive:Boolean @search
    storageLocation:Equipment! @hasInverse(field:carriers)
    status:MaterialStatus!
    barcodeImage:String
    owner: Partner @hasInverse(field:carriers)
    subLots:[MaterialSubLot] @hasInverse(field:carrier)
    units:[MaterialUnit] @hasInverse(field:carrier)
    events:[InventoryTransaction] @hasInverse(field:carrier)
}
type MaterialLot @withSubscription  {
    id:ID!
    isActive:Boolean @search
    code:String! @id
    description:String
}
type MaterialSubLot @withSubscription  {
    id:ID!
    isActive:Boolean @search
    code:String! @id
    material:MaterialDefinition! @hasInverse(field:sublots)
    description:String
    status:MaterialStatus!
    carrier:Carrier @hasInverse(field:subLots)
    storageLocation:Equipment  @hasInverse(field:materialSubLots)
    quantity:String
    dataType:DataType
    unitOfMeasure:UnitOfMeasure
    properties:[Property]
    events:[InventoryTransaction] @hasInverse(field:materialSubLot)
}
type MaterialUnit @withSubscription  {
    id:ID!
    isActive:Boolean @search
    serialNumber:String! @id @search(by: [hash])
    material:MaterialDefinition! @hasInverse(field:units)
    properties:[Property]
    carrier:Carrier @hasInverse(field:units)
    events:[InventoryTransaction] @hasInverse(field:materialUnit)
}
type InventoryTransaction  {
    id:ID!
    transactionId:String! @search(by: [hash])
    user:User
    owner:Partner
    previous:InventoryTransaction @hasInverse(field:next)
    next:InventoryTransaction @hasInverse(field:previous)
    timestamp:DateTime!
    effectiveTimestamp:DateTime!
    materialSubLot:MaterialSubLot @hasInverse(field:events)
    materialUnit:MaterialUnit @hasInverse(field:events)
    carrier:Carrier @hasInverse(field:events)
    status:MaterialStatus!
    storageLocation:Equipment @hasInverse(field:transactions)
    material:MaterialDefinition! @hasInverse(field:events)
    materialUse:MaterialUse!
    shipmentItem:ShipmentItem @hasInverse(field:transactions)
    quantity:Float!
}

type MaterialEquipment  {
    id:ID!
    key:String! @id @search(by: [hash])
    isActive:Boolean @search
    material:MaterialDefinition! @hasInverse(field:materialEquipment)
    equipment:Equipment! @hasInverse(field:materialEquipment)
    inventoryMax: Int
    inventoryMin: Int
    sortOrder: Int
}
type UnitOfMeasure @withSubscription  {
    id:ID!
    isActive:Boolean @search
    code:String! @id
    dataType:DataType
}
type UnitOfMeasureConversion @withSubscription  {
    id:ID!
    isActive:Boolean @search
    fromUoM:UnitOfMeasure!
    toUoM:UnitOfMeasure!
    numerator:Float!
    denominator:Float!
    material:MaterialDefinition! @hasInverse(field:uomConversions)
}
type MaterialStatus @withSubscription  {
    id:ID!
    isActive:Boolean @search
    code:String! @id
}
type MaterialStateModel  {
    id:ID!
    isActive:Boolean @search
    name:String! @id @search(by: [hash])
    states:[MaterialStateTransition!]!
    inventoryHandlingRules:[InventoryHandlingRule] @hasInverse(field:stateModel)
}
type MaterialStateTransition  {
    id:ID!
    status: MaterialStatus!
    to: [MaterialStatus]
    canReceive:Boolean @search
    canPack:Boolean @search
}

type PersonnelClass @withSubscription  {
    id:ID!
    isActive:Boolean @search
    name:String! @id
    description:String
    properties:[Property]
    persons:[Person] @hasInverse(field:memberOf)
    isTestedBy:[TestSpecification]
}
type Person @withSubscription  {
    id:ID!
    isActive:Boolean @search
    name:String! @id
    description:String
    properties:[Property]
    memberOf:[PersonnelClass] @hasInverse(field:persons)
}
type TestSpecification @withSubscription  {
    id:ID!
    isActive:Boolean @search
    description:String
    version:String
}
type TestResult @withSubscription  {
    id:ID!
    isActive:Boolean @search
    description:String
    result:String
    uom:UnitOfMeasure
    testDateTime:DateTime
}

type WorkCalendarDefinitionEntry @withSubscription  {
    id:ID!
    isActive:Boolean @search
    description:String
    hierarchyScope:Equipment
    freq:Frequency!
    startDateTime:DateTime!
    endDateTime:DateTime
    count:Int
    interval:Int
    wkst:Weekday
    byWeekDay:[Weekday]
    byMonth:[Int]
    bySetPos:[Int]
    byMonthDay:[Int]
    byYearDay:[Int]
    byWeekNo:[Int]
    byHour:[Int]
    byMinute:[Int]
    bySecond:[Int]
    duration:String
    entryType:WorkCalendarEntryType!
    properties:[Property]
    calendarEntries:[WorkCalendarEntry] @hasInverse(field:definition)
    workCalendar:WorkCalendar @hasInverse(field:definition)
}
enum Frequency {
    YEARLY
    MONTHLY
    WEEKLY
    DAILY
    HOURLY
    MINUTELY
    SECONDLY
}
enum Weekday {
    MO
    TU
    WE
    TH
    FR
    SA
    SU
}

type WorkCalendarEntry @withSubscription  {
    id:ID!
    isActive:Boolean @search
    description:String
    definition:WorkCalendarDefinitionEntry @hasInverse(field:calendarEntries)
    hierarchyScope:Equipment
    startDateTime:DateTime! @search
    finishDateTime:DateTime! @search
    entryType:WorkCalendarEntryType! @search
    properties:[Property]
    workCalendar:WorkCalendar @hasInverse(field:entries)
}
type WorkCalendar @withSubscription  {
    id:ID!
    isActive:Boolean @search
    name:String! @id
    description:String
    definition:[WorkCalendarDefinitionEntry] @hasInverse(field:workCalendar)
    entries:[WorkCalendarEntry] @hasInverse(field:workCalendar)
    equipment:[Equipment] @hasInverse(field:workCalendar)
}
enum WorkCalendarEntryType {
    PlannedBusyTime
    PlannedDowntime
    PlannedShutdown
}

type WorkflowSpecification @withSubscription  {
    id:ID!
    access:[ACL]
    isActive:Boolean @search
    createdDateTime:DateTime
    createdBy:User
    modifiedDateTime:DateTime
    modifiedBy:User
    name:String!
    description:String!
    nodes:[WorkflowNode] @hasInverse(field:workflowSpecification)
    connections:[WorkflowConnection] @hasInverse(field:workflowSpecification)
    instances:[WorkflowInstance] @hasInverse(field:workflowSpecification)
}
type WorkflowInstance @withSubscription  {
    id:ID!
    createdDateTime:DateTime
    createdBy:User
    modifiedDateTime:DateTime
    modifiedBy:User
    workflowSpecification:WorkflowSpecification @hasInverse(field:instances)
    parent:WorkflowInstance @hasInverse(field:children)
    children:[WorkflowInstance] @hasInverse(field:parent)
    nodeInstances:[WorkflowNodeInstance] @hasInverse(field:workflowInstance)
    propertyInstances:[WorkflowPropertyInstance] @hasInverse(field:workflowInstance)
    orderLines:[OrderLine] @hasInverse(field:workflowInstance)
}
type WorkflowNode @withSubscription  {
    id:ID!
    access:[ACL]
    isActive:Boolean @search
    createdDateTime:DateTime
    createdBy:User
    modifiedDateTime:DateTime
    modifiedBy:User
    name:String!
    description:String!
    uiComponent:String
    nodeType:WorkflowNodeType! @hasInverse(field:nodes)
    inflows:[WorkflowConnection] @hasInverse(field:to)
    outflows:[WorkflowConnection] @hasInverse(field:from)
    workflowSpecification:WorkflowSpecification! @hasInverse(field:nodes)
    properties:[WorkflowProperty] @hasInverse(field:node)
    nodeInstances:[WorkflowNodeInstance] @hasInverse(field:node)
    positionX:Int
    positionY:Int
    width:Int
    height:Int
}
type WorkflowNodeInstance @withSubscription  {
    id:ID!
    access:[ACL]
    isActive:Boolean @search
    createdDateTime:DateTime
    createdBy:User
    modifiedDateTime:DateTime
    modifiedBy:User
    workflowInstance:WorkflowInstance! @hasInverse(field:nodeInstances)
    node:WorkflowNode! @hasInverse(field:nodeInstances)
    events:[WorkflowNodeEvent] @hasInverse(field:nodeInstance)
}
type WorkflowNodeEvent @withSubscription  {
    id:ID!
    access:[ACL]
    isActive:Boolean @search
    createdDateTime:DateTime
    createdBy:User
    modifiedDateTime:DateTime
    modifiedBy:User
    nodeInstance:WorkflowNodeInstance @hasInverse(field:events)
    previous:WorkflowNodeEvent @hasInverse(field:next)
    next:WorkflowNodeEvent @hasInverse(field:previous)
    status:WorkflowNodeStatus @search
    isProcessed: Boolean @search
    value:String
}
enum WorkflowNodeStatus {
    CREATED
    CLAIMED
    STARTED
    PAUSED
    COMPLETED
}
type WorkflowNodeType @withSubscription  {
    id:ID!
    access:[ACL]
    isActive:Boolean @search
    createdDateTime:DateTime
    createdBy:User
    modifiedDateTime:DateTime
    modifiedBy:User
    name:String!
    description:String!
    nodeClass:WorkflowNodeClass!
    nodes:[WorkflowNode] @hasInverse(field:nodeType)
    properties:[WorkflowProperty] @hasInverse(field:nodeType)
}
enum WorkflowNodeClass {
    EVENT
    GATEWAY
    TASK
    SUBPROCESS
}
type WorkflowConnection @withSubscription  {
    id:ID!
    access:[ACL]
    isActive:Boolean @search
    createdDateTime:DateTime
    createdBy:User
    modifiedDateTime:DateTime
    modifiedBy:User
    connectionType:WorkflowConnectionType! @hasInverse(field:connections)
    workflowSpecification:WorkflowSpecification! @hasInverse(field:connections)
    from:WorkflowNode! @hasInverse (field:outflows)
    to:WorkflowNode! @hasInverse (field:inflows)
    condition:String
    properties:[WorkflowProperty] @hasInverse(field:connection)
}
type WorkflowConnectionType @withSubscription  {
    id:ID!
    access:[ACL]
    isActive:Boolean @search
    createdDateTime:DateTime
    createdBy:User
    modifiedDateTime:DateTime
    modifiedBy:User
    name:String!
    description:String!
    connections:[WorkflowConnection] @hasInverse(field:connectionType)
    properties:[WorkflowProperty] @hasInverse(field:connectionType)
}
type WorkflowProperty @withSubscription  {
    id:ID!
    access:[ACL]
    isActive:Boolean @search
    createdDateTime:DateTime
    createdBy:User
    modifiedDateTime:DateTime
    modifiedBy:User
    propertyType:WorkflowPropertyType!
    name:String! @search(by: [hash])
    description: String! @search(by: [hash])
    definedBy:WorkflowProperty
    dataType: DataType!
    unitOfMeasure:UnitOfMeasure
    value:String
    nodeType:WorkflowNodeType @hasInverse(field:properties)
    node:WorkflowNode @hasInverse(field:properties)
    connectionType:WorkflowConnectionType @hasInverse(field:properties)
    connection:WorkflowConnection @hasInverse(field:properties)
    instances:[WorkflowPropertyInstance] @hasInverse(field:workflowProperty)
}
type WorkflowPropertyInstance @withSubscription  {
    id:ID!
    access:[ACL]
    isActive:Boolean @search
    createdDateTime:DateTime
    createdBy:User
    modifiedDateTime:DateTime
    modifiedBy:User
    workflowInstance:WorkflowInstance @hasInverse(field:propertyInstances)
    workflowProperty:WorkflowProperty @hasInverse(field:instances)
    values:[WorkflowPropertyValue] @hasInverse(field:propertyInstance)
}
type WorkflowPropertyValue @withSubscription  {
    id:ID!
    createdDateTime:DateTime
    createdBy:User
    modifiedDateTime:DateTime
    modifiedBy:User
    propertyInstance:WorkflowPropertyInstance!
    value:String
    previous:WorkflowPropertyValue @hasInverse(field:next)
    next:WorkflowPropertyValue @hasInverse(field:previous)
}
enum WorkflowPropertyType {
    STATIC
    CONFIG
    VARIABLE
}

type ASNStaging  {
    id:ID!
    orderNumber:String!
    materialCode:String!
    serialNumber:String
    quantity:Int!
    isValid:Boolean
    errorDescription:String
    workflowInstanceId:String! @search(by: [hash])
}
type Partner  {
    id:ID!
    isActive:Boolean @search
    companyCode:String!   @search(by: [hash])
    name:String   @search(by: [hash])
    vatNumber:String
    registrationNumber:String
    contactName:String
    contactEmail:String
    contactPhone:String
    shippingAddress:Address
    billingAddress:Address
    isMerchant:Boolean @search
    isRepairer:Boolean @search
    isSupplier:Boolean @search
    isTransport:Boolean @search
    isCustomer:Boolean @search
    isInventoryOwner:Boolean @search
    carriers: [Carrier] @hasInverse(field:owner)
}
enum StockType{
    NEW_STOCK
    REPAIRED
    RETURNED
}
type InventoryHandlingPolicy  {
    id:ID!
    isActive:Boolean @search
    name:String! @id @search(by: [hash])
    materialClass:[MaterialClass] @hasInverse(field:inventoryHandlingPolicy)
    verifySerialNumberOnReceipt: Boolean
    verifySerialNumberOnPacking: Boolean
    trackBySerialNumber: Boolean
    trackByCarrier:Boolean
    rules:[InventoryHandlingRule] @hasInverse(field:inventoryHandlingPolicy)
}
type InventoryHandlingRule  {
    id:ID!
    isActive:Boolean @search
    customer:Partner!
    stockType:StockType! @search(by: [hash])
    warehouse:[Equipment!]! @hasInverse(field:inventoryHandlingRules)
    stateModel:MaterialStateModel! @hasInverse(field:inventoryHandlingRules)
    inventoryHandlingPolicy:InventoryHandlingPolicy! @hasInverse(field:rules)
}
type Address  {
    id:ID!
    isActive:Boolean @search
    name:String @search(by: [hash])
    street1: String
    street2: String
    number: String
    city: String
    state: String
    postCode: String
    countryCode: String
}
type Order  {
    id:ID!
    isActive:Boolean @search
    orderType:OrderType! @search
    customerOrderNumber:String
    customerReference:String
    deliveryTerms:IncoTerms
    status:OrderStatus!
    shipFromPartner:Partner
    shipToPartner:Partner
    invoiceFromPartner:Partner
    invoiceToPartner:Partner
    warehouse:Equipment @hasInverse(field:Orders)
    lines:[OrderLine] @hasInverse(field:order)
    shipments:[Shipment] @hasInverse(field:order)
    notes:String
    createdDateTime:DateTime
}
enum OrderType {
    SALES_ORDER
    RETURN_ORDER
    REPLACE_ORDER
    REPAIR_ORDER
    PURCHASE_ORDER
}
type OrderLine  {
    id:ID!
    isActive:Boolean @search
    order:Order @hasInverse(field:lines)
    orderLineNumber:Int!
    material:MaterialDefinition! @hasInverse(field:OrderLines)
    quantity:Int!
    defectiveSerialNumbers:String
    isReturn:Boolean
    workflowInstance:WorkflowInstance @hasInverse(field:orderLines)
}
enum IncoTerms {
    DAP
    DDP
    CPT
}
enum OrderStatus {
    CREATED
    RECEIVED
    PACKED
    SHIPPED
    DELIVERED
    COMPLETE
}

type Shipment  {
    id:ID!
    isActive:Boolean @search
    type:ShipmentType! @search(by: [hash])
    transportCompany:TransportCompany
    transportCompanyShipmentId:String
    transportCompanyProductCode:String
    reference:String @search(by: [hash, regexp])
    items:[ShipmentItem] @hasInverse(field:shipment)
    customerReference:String
    emailTrackingEnabled:Boolean
    from:Address
    to:Address
    order:Order! @hasInverse(field:shipments)
    warehouse:Equipment! @hasInverse(field:shipments)
    properties:[Property]
    dateTimeReceivedUTC:DateTime @search
    dateTimeDeliveredUTC:DateTime @search
    dateTimePackedUTC:DateTime @search
    dateTimeCreatedUTC:DateTime @search
}
enum ShipmentType {
    INBOUND
    OUTBOUND
    RETURN
}
type ShipmentItem  {
    id:ID!
    isActive:Boolean @search
    transportCompanyItemReference:String
    transportCompanyItemId:String
    trackingDetailsArticleId:String
    trackingDetailsBarcodeId:String
    trackingDetailsConsignmentId:String
    shipment:Shipment @hasInverse(field:items)
    status:ShipmentItemStatus!
    material:MaterialDefinition @hasInverse(field:shipmentItems)
    transactions:[InventoryTransaction] @hasInverse(field:shipmentItem)
    plannedQuantity:Int
    box:Box
    weightKg:Float
}
type Box {
    id:ID!
    name:String
    sizeHeightCm:Int
    sizeWidthCm:Int
    sizeDepthCm:Int
}

enum ShipmentItemStatus {
    CREATED
    PACKED
    SHIPPED
    DELIVERED
    DELETED
}
enum TransportCompany {
    AUSPOST
    MANUAL
}

type GeneralLedgerAccount {
    id:ID!
    code:String! @id
    name:String
    type:String
}
enum CostDriver {
    PER_HOUR
    PER_UNIT
}

################################
# Additions for mes processing
#
type EquipmentNameAlias @withSubscription {
    id: ID!
	equipment: Equipment!
	alias: String! @search(by: [fulltext])
	system: String! @search(by: [fulltext])
}
type PropertyNameAlias @withSubscription {
    id: ID!
	property: Property!
	alias: String! @search(by: [fulltext])
	system: String! @search(by: [fulltext])
}
type PropertyValueAlias @withSubscription {
    id: ID!
	property: Property!
	value: String! @search(by: [fulltext])
	alias: String! @search(by: [fulltext])
	system: String! @search(by: [fulltext])
}
type TransitionEventRuleset @withSubscription {
	id: ID!
	name: String!
	segmentDependency: SegmentDependency
	eventDefs: [EventDefinition]
}
type StateEventRuleset @withSubscription {
	id: ID!
	name: String!
	segment: OperationsSegment
	targetState: String!
	eventDefs: [EventDefinition]
}
type MaterialEventRuleset @withSubscription {
	id: ID!
	name: String!
	segment: OperationsSegment
	targetMaterial: String!
	targetMaterialOp: String!
	eventDefs: [EventDefinition]
}
type OrderStartRuleset @withSubscription {
	id: ID!
	name: String!
	segment: OperationsSegment
	eventDefs: [EventDefinition]
}





# Dgraph.Secret Content-type "application/json"
# Dgraph.Authorization {"VerificationKey":"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuuqKn/ZWMeXewpSWQ6nK\ne/xavJ7zrRszqpyo8Ln/AwwYJbhcwMucZCPepkAI3G0QIN9W67uIsVvjjFORfjwv\nUEftkfDQpI5FwE9KWnla3QZZn8Yko/KI6xAtm9VT+YdhoaXo5KdOR7gGRsMLHXf9\npvk60mcUIo9gqRXyl9p9L1UDP582dKEdEw+jrjYyXy42DFUSw0Fopn9rtbH2SYRv\n5DerB+LBAtA4SrBd6ro/S06Sk5O3dUL1xY+LNLR5WQI6E3RrgW8tbx9LOtBQU9sk\nqHrOOHBR0TxPqz9PIYVOiumD2jlrU7BkvRoWXqQlZg3Cvt5cdLH98Cqt4kZadJM4\n0QIDAQAB\n-----END PUBLIC KEY-----","Header":"X-Auth0-Token","Namespace":"https://libre.spruik.ai/jwt/claims","Algo":"RS256","Audience":["Ulv2gRrq4BJBBoCPkJucDSaO3bgCRMvA"]}